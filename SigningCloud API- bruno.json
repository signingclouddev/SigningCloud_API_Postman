{
  "name": "SigningCloud API",
  "version": "1",
  "items": [
    {
      "type": "http",
      "name": "Account info",
      "filename": "Account info.bru",
      "seq": 2,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}account/infomation?accesstoken={{accessToken}}",
        "method": "GET",
        "headers": [],
        "params": [
          {
            "name": "accesstoken",
            "value": "{{accessToken}}",
            "type": "query",
            "enabled": true
          }
        ],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "res": "const CryptoJS = require('crypto-js');\n\nvar jsonData = res.body;\nconsole.log(\"Response Body:\", jsonData);\n\nvar data = jsonData.data;\nconsole.log(\"Encrypted Data:\", data);\n\ntry {\n    var decryptJson = decrypt(data);\n    console.log(\"Decrypted JSON:\", decryptJson);\n  \n} catch (error) {\n    console.error(\"Error during processing:\", error.message);\n}\n\n//============\nfunction decrypt(data) {\n    try {\n        var secret = bru.getEnvVar(\"apiSecret\");\n              console.log(\"secret:\", secret);\n\n        var parsedKey = CryptoJS.SHA256(secret);\n        console.log(\"Derived Key (SHA256):\", parsedKey.toString());\n\n        // Convert hex to Base64\n        var ciphertext = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(data));\n        console.log(\"Ciphertext (Base64):\", ciphertext);\n\n        // Decrypt the data\n        var decryptedData = CryptoJS.AES.decrypt(ciphertext, parsedKey, {\n            mode: CryptoJS.mode.ECB,\n            padding: CryptoJS.pad.Pkcs7\n        });\n\n        if (!decryptedData || decryptedData.sigBytes <= 0) {\n            throw new Error(\"Decryption returned empty data. Verify the encryption key and input.\");\n        }\n\n        // Convert decrypted data to UTF-8 string\n        var decryptedText = CryptoJS.enc.Utf8.stringify(decryptedData);\n        console.log(\"Decrypted Text:\", decryptedText);\n\n        if (!decryptedText) {\n            throw new Error(\"Decryption failed. Invalid ciphertext or key.\");\n        }\n\n        // Parse as JSON\n        const decryptJson = JSON.parse(decryptedText);\n        return decryptJson;\n    } catch (error) {\n        console.error(\"Error during decryption:\", error.message);\n        throw error;\n    }\n}\n"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "X-Add Users",
      "filename": "Add Users.bru",
      "seq": 22,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}account/addusers",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const util = eval(environment.ft)().util;\n\nvar dataBody = { \n    \"users\":[\n        { \n    \t    \"email\": \"tester123@yopmail.com\", \n            \"phonesn\": \"+6283127948283\", \n            \"name\": \"LTFCC\", \n            \"roletype\": \"1\",\n            \"totpsecret\": \"O2CLTTVJL4NFXU2MGB5HGUBRWHWSTG2X\"\n        }\n    ] \n};\n\nutil.preExecute(dataBody);"
        },
        "vars": {},
        "assertions": [],
        "tests": "const util = eval(environment.ft)().util;\n\n//test\ntest(\"Status code 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n    let responseJson = res.getBody();\n    expect(responseJson.result).to.eql(0);\n    \n    var jsonData = JSON.parse(responseBody);\n    var data = jsonData.data;\n    var decryptJson = util.decrypt(data);\n    console.log(decryptJson);\n})",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "X-Delete Documents",
      "filename": "Delete Documents.bru",
      "seq": 21,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://stg-env.signingcloud.com/signserver/v1/contract/list",
        "method": "DELETE",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const util = eval(environment.ft)().util;\n\nvar dataBody = {        \n\t\"contractnum\":true\n};\n\nutil.preExecute(dataBody);"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Download Document",
      "filename": "Download Document.bru",
      "seq": 11,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}contract/file?accesstoken={{accessToken}}&data={{data}}&mac={{mac}}",
        "method": "GET",
        "headers": [],
        "params": [
          {
            "name": "accesstoken",
            "value": "{{accessToken}}",
            "type": "query",
            "enabled": true
          },
          {
            "name": "data",
            "value": "{{data}}",
            "type": "query",
            "enabled": true
          },
          {
            "name": "mac",
            "value": "{{mac}}",
            "type": "query",
            "enabled": true
          }
        ],
        "body": {
          "mode": "text",
          "text": "const util = eval(environment.ft)().util;\n\nvar dataBody = {        \n\t\"contractnum\":\"AAA8221533E897D3CFCABB3525B2AD72\"\n};\n\nutil.preExecute(dataBody);",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variables using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\nconst uploadedContractNum = bru.getEnvVar(\"uploadedContractNum\");\n\n// Validate required variables\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\nif (uploadedContractNum === undefined) {\n    throw new Error('uploadedContractNum environment variable is missing');\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB encryption with PKCS7 padding\nfunction AESEncrypt(plaintext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const blockSize = 16;\n    \n    // PKCS7 padding\n    const padding = blockSize - (plaintext.length % blockSize);\n    const paddedText = plaintext + String.fromCharCode(padding).repeat(padding);\n    \n    // AES-256-ECB encryption\n    const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n    cipher.setAutoPadding(false); // We handle padding manually\n    let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    return {\n        ciphertext: encrypted,\n        toString: () => encrypted\n    };\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    encrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        return AESEncrypt(data, parsedKey);\n    },\n\n    getMac: (encryptedData) => {\n        return SHA256(encryptedData.ciphertext + secret);\n    },\n\n    preExecute: (dataBody) => {\n        const encryptedData = util.encrypt(JSON.stringify(dataBody));\n        const mac = util.getMac(encryptedData);\n        bru.setEnvVar(\"data\", encryptedData.ciphertext);\n        bru.setEnvVar(\"mac\", mac);\n    }\n};\n\n// Create dataBody exactly as in your Postman script\nvar dataBody = {\n    \"contractnum\": uploadedContractNum,\n    \"isReqCertOfCompletion\": false\n};\n\n// Execute the preExecute function\nutil.preExecute(dataBody);\n\nconsole.log(\"✅ Certificate completion request prepared successfully\");\nconsole.log(\"Contract number:\", uploadedContractNum);",
          "res": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variable using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\n\n// Validate required variable\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\n\n// Hex to ASCII conversion function (handles the decrypted hex output)\nfunction hexToAscii(hexString) {\n    var hex = hexString.toString();\n    var str = '';\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n    }\n    return str;\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB decryption with PKCS7 unpadding\nfunction AESDecrypt(ciphertext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const encryptedBuffer = Buffer.from(ciphertext, 'hex');\n    \n    // AES-256-ECB decryption\n    const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n    decipher.setAutoPadding(false); // We handle padding manually\n    \n    let decrypted = decipher.update(encryptedBuffer);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    \n    // Remove PKCS7 padding\n    const padding = decrypted[decrypted.length - 1];\n    if (padding > 0 && padding <= 16) {\n        decrypted = decrypted.slice(0, -padding);\n    }\n    \n    return decrypted;\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    decrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        \n        // Decrypt the hex data\n        const decryptedBuffer = AESDecrypt(data, parsedKey);\n        \n        // Convert to hex string (equivalent to CryptoJS decryptedData.toString())\n        const decryptedHex = decryptedBuffer.toString('hex');\n        \n        // Convert hex to ASCII string\n        const decryptedText = hexToAscii(decryptedHex);\n        console.log(\"decryptedText\", decryptedText);\n        \n        return JSON.parse(decryptedText);\n    }\n};\n\n// Safely get response data (Bruno's res.body may be string or object)\nlet jsonData;\nif (typeof res.body === 'string') {\n    jsonData = JSON.parse(res.body);\n} else if (typeof res.body === 'object' && res.body !== null) {\n    jsonData = res.body;\n} else {\n    throw new Error('Unexpected response body format');\n}\n\n// Extract encrypted data\nvar data = jsonData.data;\nif (!data) {\n    throw new Error('Response does not contain \"data\" field');\n}\n\n// Decrypt the data\nvar decryptJson = util.decrypt(data);\nconsole.log(\"decryptJson\", JSON.stringify(decryptJson));"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Download zip",
      "filename": "Download zip.bru",
      "seq": 12,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}contract/zipfile?accesstoken={{accessToken}}&data={{data}}&mac={{mac}}",
        "method": "GET",
        "headers": [],
        "params": [
          {
            "name": "accesstoken",
            "value": "{{accessToken}}",
            "type": "query",
            "enabled": true
          },
          {
            "name": "data",
            "value": "{{data}}",
            "type": "query",
            "enabled": true
          },
          {
            "name": "mac",
            "value": "{{mac}}",
            "type": "query",
            "enabled": true
          }
        ],
        "body": {
          "mode": "text",
          "text": "const util = eval(environment.ft)().util;\n\nvar dataBody = {        \n\t\"contractnum\":\"C313E22C2DCAD80A81CF253A7E6520A9\"\n};\n\nutil.preExecute(dataBody);\n\n//after getting the pdfdata go to \n//https://tomeko.net/online_tools/hex_to_file.php?lang=en\n//Name the file to xxx.zip",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variables using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\nconst uploadedContractNum = bru.getEnvVar(\"uploadedContractNum\");\n\n// Validate required variables\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\nif (uploadedContractNum === undefined) {\n    throw new Error('uploadedContractNum environment variable is missing');\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB encryption with PKCS7 padding\nfunction AESEncrypt(plaintext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const blockSize = 16;\n    \n    // PKCS7 padding\n    const padding = blockSize - (plaintext.length % blockSize);\n    const paddedText = plaintext + String.fromCharCode(padding).repeat(padding);\n    \n    // AES-256-ECB encryption\n    const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n    cipher.setAutoPadding(false); // We handle padding manually\n    let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    return {\n        ciphertext: encrypted,\n        toString: () => encrypted\n    };\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    encrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        return AESEncrypt(data, parsedKey);\n    },\n\n    getMac: (encryptedData) => {\n        return SHA256(encryptedData.ciphertext + secret);\n    },\n\n    preExecute: (dataBody) => {\n        const encryptedData = util.encrypt(JSON.stringify(dataBody));\n        const mac = util.getMac(encryptedData);\n        bru.setEnvVar(\"data\", encryptedData.ciphertext);\n        bru.setEnvVar(\"mac\", mac);\n    }\n};\n\n// Create dataBody exactly as in your Postman script\nvar dataBody = {\n    \"contractnum\": uploadedContractNum\n};\n\n// Execute the preExecute function\nutil.preExecute(dataBody);\n\nconsole.log(\"✅ Certificate completion request prepared successfully\");\nconsole.log(\"Contract number:\", uploadedContractNum);",
          "res": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variable using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\n\n// Validate required variable\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\n\n// Hex to ASCII conversion function (handles the decrypted hex output)\nfunction hexToAscii(hexString) {\n    var hex = hexString.toString();\n    var str = '';\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n    }\n    return str;\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB decryption with PKCS7 unpadding\nfunction AESDecrypt(ciphertext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const encryptedBuffer = Buffer.from(ciphertext, 'hex');\n    \n    // AES-256-ECB decryption\n    const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n    decipher.setAutoPadding(false); // We handle padding manually\n    \n    let decrypted = decipher.update(encryptedBuffer);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    \n    // Remove PKCS7 padding\n    const padding = decrypted[decrypted.length - 1];\n    if (padding > 0 && padding <= 16) {\n        decrypted = decrypted.slice(0, -padding);\n    }\n    \n    return decrypted;\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    decrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        \n        // Decrypt the hex data\n        const decryptedBuffer = AESDecrypt(data, parsedKey);\n        \n        // Convert to hex string (equivalent to CryptoJS decryptedData.toString())\n        const decryptedHex = decryptedBuffer.toString('hex');\n        \n        // Convert hex to ASCII string\n        const decryptedText = hexToAscii(decryptedHex);\n        console.log(\"decryptedText\", decryptedText);\n        \n        return JSON.parse(decryptedText);\n    }\n};\n\n// Safely get response data (Bruno's res.body may be string or object)\nlet jsonData;\nif (typeof res.body === 'string') {\n    jsonData = JSON.parse(res.body);\n} else if (typeof res.body === 'object' && res.body !== null) {\n    jsonData = res.body;\n} else {\n    throw new Error('Unexpected response body format');\n}\n\n// Extract encrypted data\nvar data = jsonData.data;\nif (!data) {\n    throw new Error('Response does not contain \"data\" field');\n}\n\n// Decrypt the data\nvar decryptJson = util.decrypt(data);\nconsole.log(\"decryptJson\", JSON.stringify(decryptJson));"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Get Document Details",
      "filename": "Get Document Details.bru",
      "seq": 4,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}contract/details?accesstoken={{accessToken}}&data={{data}}&mac={{mac}}",
        "method": "GET",
        "headers": [],
        "params": [
          {
            "name": "accesstoken",
            "value": "{{accessToken}}",
            "type": "query",
            "enabled": true
          },
          {
            "name": "data",
            "value": "{{data}}",
            "type": "query",
            "enabled": true
          },
          {
            "name": "mac",
            "value": "{{mac}}",
            "type": "query",
            "enabled": true
          }
        ],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const apiSecret = bru.getEnvVar('apiSecret');\nif (!apiSecret) {\n    throw new Error('apiSecret environment variable not found');\n}\n\nconst crypto = require('crypto');\nconst parsedKey = crypto.createHash('sha256').update(apiSecret, 'utf8').digest('hex');\n\nfunction encrypt(data) {\n    const keyBuffer = Buffer.from(parsedKey, 'hex');\n    const blockSize = 16;\n    const padding = blockSize - (data.length % blockSize);\n    const paddedText = data + String.fromCharCode(padding).repeat(padding);\n    const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n    cipher.setAutoPadding(false);\n    let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    return encrypted;\n}\n\nfunction getMac(encryptedData) {\n    return crypto.createHash('sha256').update(encryptedData + apiSecret, 'utf8').digest('hex');\n}\n\nvar dataBody = {\n\t\"contractnum\":\"33ADFC9A8934384804BF495FF24914BE\"\n};\n\nconst encryptedData = encrypt(JSON.stringify(dataBody));\nconst mac = getMac(encryptedData);\n\nbru.setEnvVar(\"data\", encryptedData);\nbru.setEnvVar(\"mac\", mac);",
          "res": "// Safe version that handles both string and object\nconst apiSecret = bru.getEnvVar('apiSecret');\nif (!apiSecret) {\n    throw new Error('apiSecret not found in collection variables');\n}\n\nconst crypto = require('crypto');\nconst parsedKey = crypto.createHash('sha256').update(apiSecret, 'utf8').digest('hex');\n\nfunction hexToAscii(str1) {\n    var hex = str1.toString();\n    var str = '';\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n    }\n    return str;\n}\n\nfunction decrypt(data) {\n    const keyBuffer = Buffer.from(parsedKey, 'hex');\n    const encryptedBuffer = Buffer.from(data, 'hex');\n    const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n    decipher.setAutoPadding(false);\n    let decrypted = decipher.update(encryptedBuffer);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    \n    const padding = decrypted[decrypted.length - 1];\n    if (padding > 0 && padding <= 16) {\n        decrypted = decrypted.slice(0, -padding);\n    }\n    \n    const decryptedText = decrypted.toString('hex');\n    return JSON.parse(hexToAscii(decryptedText));\n}\n\n// ✅ Handle both string and object responses\nvar jsonData = typeof res.body === 'string' ? JSON.parse(res.body) : res.body;\nvar data = jsonData.data;\nvar decryptJson = decrypt(data);\n\nconsole.log(\"decryptJson\", JSON.stringify(decryptJson));\nbru.setEnvVar(\"decryptedResponse\", JSON.stringify(decryptJson));"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Get Document List",
      "filename": "Get Document List.bru",
      "seq": 3,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}contract/list?accesstoken={{accessToken}}&data={{data}}&mac={{mac}}",
        "method": "GET",
        "headers": [],
        "params": [
          {
            "name": "accesstoken",
            "value": "{{accessToken}}",
            "type": "query",
            "enabled": true
          },
          {
            "name": "data",
            "value": "{{data}}",
            "type": "query",
            "enabled": true
          },
          {
            "name": "mac",
            "value": "{{mac}}",
            "type": "query",
            "enabled": true
          }
        ],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const apiSecret = bru.getEnvVar('apiSecret');\nif (!apiSecret) {\n    throw new Error('apiSecret environment variable not found');\n}\n\nconst crypto = require('crypto');\nconst parsedKey = crypto.createHash('sha256').update(apiSecret, 'utf8').digest('hex');\n\nfunction encrypt(data) {\n    const keyBuffer = Buffer.from(parsedKey, 'hex');\n    const blockSize = 16;\n    const padding = blockSize - (data.length % blockSize);\n    const paddedText = data + String.fromCharCode(padding).repeat(padding);\n    const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n    cipher.setAutoPadding(false);\n    let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    return encrypted;\n}\n\nfunction getMac(encryptedData) {\n    return crypto.createHash('sha256').update(encryptedData + apiSecret, 'utf8').digest('hex');\n}\n\nvar dataBody = {\n    \"startIndex\": 1,\n    \"pageSize\": 50,\n    \"rDetail\": 2,\n    \"contractState\": 1,\n    \"date\": \"\"\n};\n\nconst encryptedData = encrypt(JSON.stringify(dataBody));\nconst mac = getMac(encryptedData);\n\nbru.setEnvVar(\"data\", encryptedData);\nbru.setEnvVar(\"mac\", mac);",
          "res": "// Safe version that handles both string and object\nconst apiSecret = bru.getEnvVar('apiSecret');\nif (!apiSecret) {\n    throw new Error('apiSecret not found in collection variables');\n}\n\nconst crypto = require('crypto');\nconst parsedKey = crypto.createHash('sha256').update(apiSecret, 'utf8').digest('hex');\n\nfunction hexToAscii(str1) {\n    var hex = str1.toString();\n    var str = '';\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n    }\n    return str;\n}\n\nfunction decrypt(data) {\n    const keyBuffer = Buffer.from(parsedKey, 'hex');\n    const encryptedBuffer = Buffer.from(data, 'hex');\n    const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n    decipher.setAutoPadding(false);\n    let decrypted = decipher.update(encryptedBuffer);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    \n    const padding = decrypted[decrypted.length - 1];\n    if (padding > 0 && padding <= 16) {\n        decrypted = decrypted.slice(0, -padding);\n    }\n    \n    const decryptedText = decrypted.toString('hex');\n    return JSON.parse(hexToAscii(decryptedText));\n}\n\n// ✅ Handle both string and object responses\nvar jsonData = typeof res.body === 'string' ? JSON.parse(res.body) : res.body;\nvar data = jsonData.data;\nvar decryptJson = decrypt(data);\n\nconsole.log(\"decryptJson\", JSON.stringify(decryptJson));\nbru.setEnvVar(\"decryptedResponse\", JSON.stringify(decryptJson));"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Get Token",
      "filename": "Get Token.bru",
      "seq": 1,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}accesstoken?client_id={{apiKey}}",
        "method": "GET",
        "headers": [
          {
            "name": "client_id",
            "value": "",
            "enabled": false
          },
          {
            "name": "state",
            "value": "",
            "enabled": false
          }
        ],
        "params": [
          {
            "name": "client_id",
            "value": "{{apiKey}}",
            "type": "query",
            "enabled": true
          }
        ],
        "body": {
          "mode": "text",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "res": "const CryptoJS = require('crypto-js');\n\nvar jsonData = res.body;\nconsole.log(\"Response Body:\", jsonData);\n\nvar data = jsonData.data;\nconsole.log(\"Encrypted Data:\", data);\n\ntry {\n    var decryptJson = decrypt(data);\n    console.log(\"Decrypted JSON:\", decryptJson);\n\n    if (decryptJson.at) {\n        console.log(\"Access Token:\", decryptJson.at);\n        bru.setEnvVar(\"accessToken\", decryptJson.at);\n    } else {\n        throw new Error(\"Access token not found in decrypted JSON.\");\n    }\n} catch (error) {\n    console.error(\"Error during processing:\", error.message);\n} \n\n//===============================\nfunction decrypt(data) {\n    try {\n        var secret = bru.getEnvVar(\"apiSecret\");\n              console.log(\"secret:\", secret);\n\n        var parsedKey = CryptoJS.SHA256(secret);\n        console.log(\"Derived Key (SHA256):\", parsedKey.toString());\n\n        // Convert hex to Base64\n        var ciphertext = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(data));\n        console.log(\"Ciphertext (Base64):\", ciphertext);\n\n        // Decrypt the data\n        var decryptedData = CryptoJS.AES.decrypt(ciphertext, parsedKey, {\n            mode: CryptoJS.mode.ECB,\n            padding: CryptoJS.pad.Pkcs7\n        });\n\n        if (!decryptedData || decryptedData.sigBytes <= 0) {\n            throw new Error(\"Decryption returned empty data. Verify the encryption key and input.\");\n        }\n\n        // Convert decrypted data to UTF-8 string\n        var decryptedText = CryptoJS.enc.Utf8.stringify(decryptedData);\n        console.log(\"Decrypted Text:\", decryptedText);\n\n        if (!decryptedText) {\n            throw new Error(\"Decryption failed. Invalid ciphertext or key.\");\n        }\n\n        // Parse as JSON\n        const decryptJson = JSON.parse(decryptedText);\n        return decryptJson;\n    } catch (error) {\n        console.error(\"Error during decryption:\", error.message);\n        throw error;\n    }\n}\n\n\n\n"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "X-Landmarks Verification",
      "filename": "Landmarks Verification.bru",
      "seq": 17,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://stg-env.signingcloud.com/signserver/v1/user/ekycimages/verify",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const util = eval(environment.ft)().util;\n\nvar dataBody = {        \n\t\t\"signerInfo\":{\n\t\t\"name\":\"LEW CHIN KEAN\",\n\t\t\"email\":\"chinkean12@yopmail.com\",\n\t},\n\t\"docType\":\"mykad\"\n};\n\nutil.preExecute(dataBody);"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "X-Optical character recognition -OCR- Checking",
      "filename": "Optical character recognition -OCR- Checking.bru",
      "seq": 16,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://stg-env.signingcloud.com/signserver/v1/user/ekycimages/ocr",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const util = eval(environment.ft)().util;\n\nvar dataBody = {        \n\t\"signerInfo\":{\n\t\t\"name\":\"lew chin kean\",\t\t\n        \"email\":\"chinkean12@yopmail.com\"\n\t},\n\t\"docType\":\"mykad\",\n\t\"idFront\":\"\",\n\t\"idFrontFlash\":\"\",\n\n};\n\nutil.preExecute(dataBody);"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Preupload Document",
      "filename": "Preupload Document.bru",
      "seq": 5,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://postman-echo.com/post",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "multipartForm",
          "formUrlEncoded": [],
          "multipartForm": [
            {
              "type": "file",
              "name": "file",
              "value": [
                "C:\\Users\\honloon.wong\\Documents\\SigningCloud\\DEMO_form\\demo and test.1.2.3.docx"
              ],
              "enabled": true
            }
          ],
          "file": []
        },
        "script": {
          "res": "// Handle file response and extract data\ntry {\n    // res.body should already be parsed JSON object\n    const jsonData = res.body.files;\n    \n    if (!jsonData || Object.keys(jsonData).length === 0) {\n        throw new Error('No files found in response');\n    }\n    \n    const firstFileKey = Object.keys(jsonData)[0];\n    const base64ByteString = jsonData[firstFileKey].split(/[,]+/).pop();\n    const fileType = firstFileKey.split(/[.]+/).pop();\n    \n    // Set environment variables\n    bru.setEnvVar(\"base64ByteString\", base64ByteString);\n    bru.setEnvVar(\"fileType\", fileType);\n    \n    console.log(\"✅ File data extracted successfully\");\n    console.log(\"File type:\", fileType);\n    console.log(\"Base64 preview:\", base64ByteString.substring(0, 30) + \"...\");\n    \n} catch (error) {\n    console.error(\"❌ Error processing file response:\", error.message);\n    throw error;\n}"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "X-Query Users",
      "filename": "Query Users.bru",
      "seq": 24,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}account/queryusers",
        "method": "POST",
        "headers": [],
        "params": [
          {
            "name": "accesstoken",
            "value": "{{accessToken}}",
            "type": "query",
            "enabled": false
          },
          {
            "name": "data",
            "value": "{{queryUserData}}",
            "type": "query",
            "enabled": false
          },
          {
            "name": "mac",
            "value": "{{mac}}",
            "type": "query",
            "enabled": false
          }
        ],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const util = eval(environment.ft)().util;\n\nvar dataBody = {\n    \"q\": {\n        \"email\":\"tester@yopmail.com\"\n    }\n};\n\nutil.preExecute(dataBody);"
        },
        "vars": {},
        "assertions": [],
        "tests": "const util = eval(environment.ft)().util;\n\n//test\ntest(\"Status code 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n    let responseJson = res.getBody();\n    expect(responseJson.result).to.eql(0);\n    \n    var jsonData = JSON.parse(responseBody);\n    var data = jsonData.data;\n    var decryptJson = util.decrypt(data);\n    console.log(decryptJson);\n})",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "X-Selfie Verification",
      "filename": "Selfie Verification.bru",
      "seq": 18,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://stg-env.signingcloud.com/signserver/v1/user/ekycimages/face",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const util = eval(environment.ft)().util;\n\nvar dataBody = {\n\"signerInfo\":{\n//\"idcardnum\":\"961126065137\",\n\"name\":\"ho han wen\",\n\"email\":\"wen1@yopmail.com\"\n},\n\"selfie\":\"\"\n};\n\nutil.preExecute(dataBody);"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Set Coordinates",
      "filename": "Set Coordinates.bru",
      "seq": 7,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}contract/coordinate",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "multipartForm",
          "formUrlEncoded": [],
          "multipartForm": [
            {
              "type": "text",
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "type": "text",
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "type": "text",
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "file": []
        },
        "script": {
          "req": "const util = eval(environment.ft)().util;\nvar base64ByteString = bru.getEnvVar(\"base64ByteString\");\nvar words = require('crypto-js').enc.Base64.parse(base64ByteString);\n\nvar dataBody = {\n\t\"contractInfo\": {\n\t\t\"signerinfo\": [{\n\t\t\t\"email\": \"honloon@technozilab.com\",\n\t\t\t\"signset\": [\n            {\n                \"pageindex\": 1,\n                \"top\": 174,\n                \"left\": 172,\n                \"fieldtype\": \"sign\"\n            },\n            //    {\n            //       \"pageindex\": 1,\n            //       \"top\": 900,\n            //       \"left\": 200,\n            //       \"height\": 25,\n            //       \"width\": 200,\n            //       \"fieldtype\": \"textfield\"},\n            //    {\n            //       \"pageindex\": 1,\n            //       \"top\": 930,\n            //       \"left\": 250,\n            //       \"fieldtype\": \"signdate\"},\n            //    {\n            //       \"pageindex\": 1,\n            //       \"top\": 200,\n            //       \"left\": 100,\n            //       \"fieldtype\": \"seal\"},\n\n            ]\n\t\t}],\n        \"contractnum\":bru.getEnvVar(\"uploadedContractNum\").contractnum,\n        // \"contractnum\":\"7B4D309A9E8C0481320E01F3CDFBAEBB\",\n\t}\n}\n\nutil.preExecute(dataBody);\n"
        },
        "vars": {},
        "assertions": [],
        "tests": "const util = eval(environment.ft)().util;\n\ntest(\"Status code 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n})",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Sign Auto",
      "filename": "Sign Auto.bru",
      "seq": 9,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}contract/signature/auto",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variables using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\nconst uploadedContractNum = bru.getEnvVar(\"uploadedContractNum\");\n\n// Validate required variables\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\nif (!uploadedContractNum) {\n    throw new Error('uploadedContractNum environment variable is missing');\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB encryption with PKCS7 padding\nfunction AESEncrypt(plaintext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const blockSize = 16;\n    \n    // PKCS7 padding\n    const padding = blockSize - (plaintext.length % blockSize);\n    const paddedText = plaintext + String.fromCharCode(padding).repeat(padding);\n    \n    // AES-256-ECB encryption\n    const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n    cipher.setAutoPadding(false); // We handle padding manually\n    let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    return {\n        ciphertext: encrypted,\n        toString: () => encrypted\n    };\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    encrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        return AESEncrypt(data, parsedKey);\n    },\n\n    getMac: (encryptedData) => {\n        return SHA256(encryptedData.ciphertext + secret);\n    },\n\n    preExecute: (dataBody) => {\n        const encryptedData = util.encrypt(JSON.stringify(dataBody));\n        const mac = util.getMac(encryptedData);\n        bru.setEnvVar(\"data\", encryptedData.ciphertext);\n        bru.setEnvVar(\"mac\", mac);\n    }\n};\n\n// Create dataBody exactly as in your Postman script\nvar dataBody = {\n    \"signerInfo\":{\n        \"email\":\"honloontestnewdev@yopmail.com\",\n        //\"signkeyword\":\"Majikan\",\n        \"signkeyword\":\"Testing\",\n//         \"verifycode\":\"891523\", //veri info if there is authtype (1 - SMS 5OT)\n        //\"callUrl\":\"http://172.16.1.82:8999/callback\"     \n    },\n    //\"contractnum\":\"8964B10F50616B2ABFE3A6C2DD1243EA\"\n    \"contractnum\":bru.getEnvVar(\"uploadedContractNum\")\n\n};\n\n// Execute the preExecute function\nutil.preExecute(dataBody);\n\nconsole.log(\"✅ Pre-request script completed successfully\");\nconsole.log(\"Contract number used:\", uploadedContractNum);",
          "res": "// Safe version that handles both string and object\nconst apiSecret = bru.getEnvVar('apiSecret');\nif (!apiSecret) {\n    throw new Error('apiSecret not found in collection variables');\n}\n\nconst crypto = require('crypto');\nconst parsedKey = crypto.createHash('sha256').update(apiSecret, 'utf8').digest('hex');\n\nfunction hexToAscii(str1) {\n    var hex = str1.toString();\n    var str = '';\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n    }\n    return str;\n}\n\nfunction decrypt(data) {\n    const keyBuffer = Buffer.from(parsedKey, 'hex');\n    const encryptedBuffer = Buffer.from(data, 'hex');\n    const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n    decipher.setAutoPadding(false);\n    let decrypted = decipher.update(encryptedBuffer);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    \n    const padding = decrypted[decrypted.length - 1];\n    if (padding > 0 && padding <= 16) {\n        decrypted = decrypted.slice(0, -padding);\n    }\n    \n    const decryptedText = decrypted.toString('hex');\n    return JSON.parse(hexToAscii(decryptedText));\n}\n\n// ✅ Handle both string and object responses\nvar jsonData = typeof res.body === 'string' ? JSON.parse(res.body) : res.body;\nvar data = jsonData.data;\nvar decryptJson = decrypt(data);\n\nconsole.log(\"decryptJson\", JSON.stringify(decryptJson));"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Sign Manual",
      "filename": "Sign Manual.bru",
      "seq": 8,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}contract/signature/manual",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variables using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\nconst uploadedContractNum = bru.getEnvVar(\"uploadedContractNum\");\n\n// Validate required variables\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\nif (!uploadedContractNum) {\n    throw new Error('uploadedContractNum environment variable is missing');\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB encryption with PKCS7 padding\nfunction AESEncrypt(plaintext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const blockSize = 16;\n    \n    // PKCS7 padding\n    const padding = blockSize - (plaintext.length % blockSize);\n    const paddedText = plaintext + String.fromCharCode(padding).repeat(padding);\n    \n    // AES-256-ECB encryption\n    const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n    cipher.setAutoPadding(false); // We handle padding manually\n    let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    return {\n        ciphertext: encrypted,\n        toString: () => encrypted\n    };\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    encrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        return AESEncrypt(data, parsedKey);\n    },\n\n    getMac: (encryptedData) => {\n        return SHA256(encryptedData.ciphertext + secret);\n    },\n\n    preExecute: (dataBody) => {\n        const encryptedData = util.encrypt(JSON.stringify(dataBody));\n        const mac = util.getMac(encryptedData);\n        bru.setEnvVar(\"data\", encryptedData.ciphertext);\n        bru.setEnvVar(\"mac\", mac);\n    }\n};\n\n// Create dataBody exactly as in your Postman script\nvar dataBody = {\n    \"signerInfo\": {\n        \"email\": \"honloontestnewdev@yopmail.com\"\n    },\n    \"contractnum\": uploadedContractNum\n};\n\n// Execute the preExecute function\nutil.preExecute(dataBody);\n\nconsole.log(\"✅ Pre-request script completed successfully\");\nconsole.log(\"Contract number used:\", uploadedContractNum);",
          "res": "// Safe version that handles both string and object\nconst apiSecret = bru.getEnvVar('apiSecret');\nif (!apiSecret) {\n    throw new Error('apiSecret not found in collection variables');\n}\n\nconst crypto = require('crypto');\nconst parsedKey = crypto.createHash('sha256').update(apiSecret, 'utf8').digest('hex');\n\nfunction hexToAscii(str1) {\n    var hex = str1.toString();\n    var str = '';\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n    }\n    return str;\n}\n\nfunction decrypt(data) {\n    const keyBuffer = Buffer.from(parsedKey, 'hex');\n    const encryptedBuffer = Buffer.from(data, 'hex');\n    const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n    decipher.setAutoPadding(false);\n    let decrypted = decipher.update(encryptedBuffer);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    \n    const padding = decrypted[decrypted.length - 1];\n    if (padding > 0 && padding <= 16) {\n        decrypted = decrypted.slice(0, -padding);\n    }\n    \n    const decryptedText = decrypted.toString('hex');\n    return JSON.parse(hexToAscii(decryptedText));\n}\n\n// ✅ Handle both string and object responses\nvar jsonData = typeof res.body === 'string' ? JSON.parse(res.body) : res.body;\nvar data = jsonData.data;\nvar decryptJson = decrypt(data);\n\nconsole.log(\"decryptJson\", JSON.stringify(decryptJson));"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "X-Update Users",
      "filename": "Update Users.bru",
      "seq": 23,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}account/updateusers?accesstoken={{accessToken}}&data={{updateUserData}}&mac={{mac}}",
        "method": "POST",
        "headers": [
          {
            "name": "accesstoken",
            "value": "{{accessToken}}",
            "enabled": true
          },
          {
            "name": "data",
            "value": "{{data}}",
            "enabled": true
          },
          {
            "name": "mac",
            "value": "{{mac}}",
            "enabled": true
          }
        ],
        "params": [
          {
            "name": "accesstoken",
            "value": "{{accessToken}}",
            "type": "query",
            "enabled": true
          },
          {
            "name": "data",
            "value": "{{updateUserData}}",
            "type": "query",
            "enabled": true
          },
          {
            "name": "mac",
            "value": "{{mac}}",
            "type": "query",
            "enabled": true
          }
        ],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const util = eval(environment.ft)().util;\n\nvar dataBody = {\n    \"users\":[\n        {\n            \"email\": \"yeetesting@yopmail.com\",\n            \"phonesn\": \"+60189104878\",\n            \"totpsecret\": \"O2CLTTVJL4NFXU2MGB5HGUBRWHWSTG2X\"\n        }\n    ]\n};\n\nvar encryptedData = util.encrypt(JSON.stringify(dataBody));\nvar mac = util.getMac(encryptedData);\n\nbru.setEnvVar(\"updateUserData\", encryptedData.ciphertext);\nbru.setEnvVar(\"mac\", mac);"
        },
        "vars": {},
        "assertions": [],
        "tests": "const util = eval(environment.ft)().util;\n\n//test\ntest(\"Status code 200\", function () {\n    expect(res.getStatus()).to.equal(200);\n    let responseJson = res.getBody();\n    expect(responseJson.result).to.eql(0);\n    \n    var jsonData = JSON.parse(responseBody);\n    var data = jsonData.data;\n    var decryptJson = util.decrypt(data);\n    console.log(decryptJson);\n})",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Upload Company Image",
      "filename": "Upload Company Image.bru",
      "seq": 15,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://demo.signingcloud.com:9444/signserver/v1/user/companyimg",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variables using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\nconst uploadedContractNum = bru.getEnvVar(\"uploadedContractNum\");\n\n// Validate required variables\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\nif (!uploadedContractNum) {\n    throw new Error('uploadedContractNum environment variable is missing');\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB encryption with PKCS7 padding\nfunction AESEncrypt(plaintext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const blockSize = 16;\n    \n    // PKCS7 padding\n    const padding = blockSize - (plaintext.length % blockSize);\n    const paddedText = plaintext + String.fromCharCode(padding).repeat(padding);\n    \n    // AES-256-ECB encryption\n    const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n    cipher.setAutoPadding(false); // We handle padding manually\n    let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    return {\n        ciphertext: encrypted,\n        toString: () => encrypted\n    };\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    encrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        return AESEncrypt(data, parsedKey);\n    },\n\n    getMac: (encryptedData) => {\n        return SHA256(encryptedData.ciphertext + secret);\n    },\n\n    preExecute: (dataBody) => {\n        const encryptedData = util.encrypt(JSON.stringify(dataBody));\n        const mac = util.getMac(encryptedData);\n        bru.setEnvVar(\"data\", encryptedData.ciphertext);\n        bru.setEnvVar(\"mac\", mac);\n    }\n};\n\nvar dataBody = {        \n\t\"imgn    \"transparency\":\"1\"\n};\n\n// Execute the preExecute function\nutil.preExecute(dataBody);\n\nconsole.log(\"✅ Pre-request script completed successfully\");",
          "res": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variable using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\n\n// Validate required variable\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\n\n// Hex to ASCII conversion function (handles the decrypted hex output)\nfunction hexToAscii(hexString) {\n    var hex = hexString.toString();\n    var str = '';\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n    }\n    return str;\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB decryption with PKCS7 unpadding\nfunction AESDecrypt(ciphertext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const encryptedBuffer = Buffer.from(ciphertext, 'hex');\n    \n    // AES-256-ECB decryption\n    const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n    decipher.setAutoPadding(false); // We handle padding manually\n    \n    let decrypted = decipher.update(encryptedBuffer);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    \n    // Remove PKCS7 padding\n    const padding = decrypted[decrypted.length - 1];\n    if (padding > 0 && padding <= 16) {\n        decrypted = decrypted.slice(0, -padding);\n    }\n    \n    return decrypted;\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    decrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        \n        // Decrypt the hex data\n        const decryptedBuffer = AESDecrypt(data, parsedKey);\n        \n        // Convert to hex string (equivalent to CryptoJS decryptedData.toString())\n        const decryptedHex = decryptedBuffer.toString('hex');\n        \n        // Convert hex to ASCII string\n        const decryptedText = hexToAscii(decryptedHex);\n        console.log(\"decryptedText\", decryptedText);\n        \n        return JSON.parse(decryptedText);\n    }\n};\n\n// Safely get response data (Bruno's res.body may be string or object)\nlet jsonData;\nif (typeof res.body === 'string') {\n    jsonData = JSON.parse(res.body);\n} else if (typeof res.body === 'object' && res.body !== null) {\n    jsonData = res.body;\n} else {\n    throw new Error('Unexpected response body format');\n}\n\n// Extract encrypted data\nvar data = jsonData.data;\nif (!data) {\n    throw new Error('Response does not contain \"data\" field');\n}\n\n// Decrypt the data\nvar decryptJson = util.decrypt(data);\nconsole.log(\"decryptJson\", JSON.stringify(decryptJson));"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Upload Document",
      "filename": "Upload Document.bru",
      "seq": 6,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}contract/file",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "multipartForm",
          "formUrlEncoded": [],
          "multipartForm": [
            {
              "type": "text",
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "type": "text",
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "type": "text",
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            },
            {
              "type": "file",
              "name": "uploadFile",
              "value": [
                "C:\\Users\\honloon.wong\\Documents\\SigningCloud\\DEMO_form\\demo and test.1.2.3.docx"
              ],
              "enabled": true
            }
          ],
          "file": []
        },
        "script": {
          "req": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variables using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\nconst base64ByteString = bru.getEnvVar(\"base64ByteString\");\n\n// Validate required variables\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\nif (!base64ByteString) {\n    throw new Error('base64ByteString environment variable is missing');\n}\n\n// Helper function to parse base64 (equivalent to CryptoJS.enc.Base64.parse)\nfunction base64Parse(base64String) {\n    // Handle data URL format (e.g., \"data:application/pdf;base64,abc123...\")\n    const cleanBase64 = base64String.split(/[,]+/).pop();\n    return Buffer.from(cleanBase64, 'base64');\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    if (typeof input === 'string') {\n        return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n    } else if (Buffer.isBuffer(input)) {\n        return crypto.createHash('sha256').update(input).digest('hex');\n    } else {\n        throw new Error('SHA256 input must be string or Buffer');\n    }\n}\n\n// AES ECB encryption with PKCS7 padding\nfunction AESEncrypt(plaintext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const blockSize = 16;\n    \n    // PKCS7 padding\n    const padding = blockSize - (plaintext.length % blockSize);\n    const paddedText = plaintext + String.fromCharCode(padding).repeat(padding);\n    \n    // AES-256-ECB encryption\n    const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n    cipher.setAutoPadding(false); // We handle padding manually\n    let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    return {\n        ciphertext: encrypted,\n        toString: () => encrypted\n    };\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    encrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        return AESEncrypt(data, parsedKey);\n    },\n\n    getMac: (encryptedData) => {\n        return SHA256(encryptedData.ciphertext + secret);\n    },\n\n    preExecute: (dataBody) => {\n        const encryptedData = util.encrypt(JSON.stringify(dataBody));\n        const mac = util.getMac(encryptedData);\n        bru.setEnvVar(\"data\", encryptedData.ciphertext);\n        bru.setEnvVar(\"mac\", mac);\n    }\n};\n\n// Parse base64 string for uploadFileHash\nconst wordsBuffer = base64Parse(base64ByteString);\n\n// Create dataBody exactly as in your Postman script\nvar dataBody = {\n    \"contractInfo\": {\n        \"contractname\": \"test_file\",\n        \"isRemoveSignature\": true,\n        \"signernum\": 1,\n        \"contractnum\": \"\",\n        \"signerinfo\": [{\n            \"caprovide\": \"1\",\n            \"email\": \"honloontestnewdev@yopmail.com\",\n          \"signset\": [\n//                 {\"fieldtype\":\"textfield\",\"left\":0,\"top\":4,\"width\":150,\"height\":50,\"pageindex\":1},\n                {\"fieldtype\":\"sign\",\"left\":72,\"top\":395,\"width\":100,\"height\":50,\"pageindex\":1},\n//                 {\"fieldtype\":\"sign\",\"left\":494,\"top\":791,\"width\":100,\"height\":50,\"pageindex\":1}\n            ],\n            \"authtype\": 0\n//             \n        }]\n    },\n    \"uploadFileHash\": SHA256(wordsBuffer), // SHA256 of the binary data\n    \"type\": \"docx\"\n};\n\n// Execute the preExecute function\nutil.preExecute(dataBody);\n\nconsole.log(\"✅ Pre-request script completed successfully\");",
          "res": "// Safe version that handles both string and object\nconst apiSecret = bru.getEnvVar('apiSecret');\nif (!apiSecret) {\n    throw new Error('apiSecret not found in collection variables');\n}\n\n// Debug the response structure\nconsole.log('res.body type:', typeof res.body);\nconsole.log('res.body:', res.body);\n\n// Safely get JSON data\nlet jsonData1;\ntry {\n    if (typeof res.body === 'string') {\n        jsonData1 = JSON.parse(res.body);\n    } else if (typeof res.body === 'object' && res.body !== null) {\n        jsonData1 = res.body;\n    } else {\n        throw new Error('Unexpected response body type');\n    }\n} catch (parseError) {\n    console.error('Failed to parse response:', parseError.message);\n    throw new Error('Invalid JSON response');\n}\n\nconsole.log('jsonData keys:', Object.keys(jsonData1 || {}));\nconsole.log('jsonData.data:', jsonData1.data);\nconsole.log('jsonData.data type:', typeof jsonData1.data);\n\n// Check if data field exists\nif (!jsonData1.data) {\n    throw new Error('Response does not contain \"data\" field. Available fields: ' + Object.keys(jsonData1).join(', '));\n}\n\nconst crypto = require('crypto');\nconst parsedKey = crypto.createHash('sha256').update(apiSecret, 'utf8').digest('hex');\n\nfunction hexToAscii(str1) {\n    var hex = str1.toString();\n    var str = '';\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n    }\n    return str;\n}\n\nfunction decrypt(data) {\n    const keyBuffer = Buffer.from(parsedKey, 'hex');\n    const encryptedBuffer = Buffer.from(data, 'hex');\n    const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n    decipher.setAutoPadding(false);\n    let decrypted = decipher.update(encryptedBuffer);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    \n    const padding = decrypted[decrypted.length - 1];\n    if (padding > 0 && padding <= 16) {\n        decrypted = decrypted.slice(0, -padding);\n    }\n    \n    const decryptedText = decrypted.toString('hex');\n    return JSON.parse(hexToAscii(decryptedText));\n}\n\n// ✅ Handle both string and object responses\nvar jsonData = typeof res.body === 'string' ? JSON.parse(res.body) : res.body;\nvar data = jsonData.data;\nvar decryptJson = decrypt(data);\n\nconsole.log(\"decryptJson\", JSON.stringify(decryptJson));\nbru.setEnvVar(\"decryptedResponse\", JSON.stringify(decryptJson));\n// Set environment variable\nbru.setEnvVar(\"uploadedContractNum\", decryptJson.contractnum);"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "X-Upload EKYC Data",
      "filename": "Upload EKYC Data.bru",
      "seq": 19,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://stg-env.signingcloud.com/signserver/v1//user/ekycdata/",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "const util = eval(environment.ft)().util;\n\nvar dataBody = {        \n\"selfie\": \"\",\n\"docType\":\"\",\n\"idFront\":\"\",\n\"idBack\":\"\",\n\"signerInfo\": {\n\"email\":\"keantest1009@yopmail.com\"\n},\n\"ekycId\": {\n\"address\":\"NO1 JALAN 2^TAMAN BUNGA^57000 KUALA LUMPUR^WILAYAHPERSEKUTUAN\",\n\"nationality\":\"WARGANEGARA\",\n\"documentid\": \"…\",\n\"gender\": \"…\",\n\"fullname\": \"…\",\n\"state_name\":\"Malaysia\",\n\"state_code\":\"MYS\"\n},\n\"ekycFace\": {\n\"faceVerification\":\"82.16\",\n\"faceCheck\":\"0.99\"\n},\n\"ekycFront\": {\n\"mykadType\":\"New IC\",\n\"flagLogoResult\":\"93.09\",\n\"headerResult\":\"34.54\",\n\"logoResult\":\"87.98\",\n\"hibiscusResult\":\"63.03\",\n\"chipResult\":\"73.55\",\n\"mscResult\":\"86.59\",\n\"microprintResult\":\"13.0\",\n\"hologramResult\":\"Pass\",\n\"colorModeResult\":\"Pass\",\n\"screenResult\":\"Pass\",\n\"ghostPhotoColorDetectionResult\":\"Pass\",\n\"substitutionResult\":\"Pass\",\n\"fontResult\":\"Pass\",\n\"idBrightnessDetectionResult\":\"Pass\",\n\"faceBrightnessDetectionResult\":\"Pass\"\n},\n\"ekycBack\": {\n\"tngResult\":\"91.81\",\n\"malaysiaResult\":\"30.19\",\n\"kppnResult\":\"53.96\",\n\"atmResult\":\"0.0\",\n\"crownResult\":\"37.07\",\n\"signatureResult\":\"80.75\",\n\"towerResult\":\"46.98\",\n\"is80kResult\":\"50.83\",\n\"mepsResult\":\"0.0\"\n},\n\"ekycProvider\":\"CTOS\"\n};\n\nutil.preExecute(dataBody);"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Upload Seal Image",
      "filename": "Upload Seal Image.bru",
      "seq": 14,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}user/stampimg",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variables using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\nconst uploadedContractNum = bru.getEnvVar(\"uploadedContractNum\");\n\n// Validate required variables\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\nif (!uploadedContractNum) {\n    throw new Error('uploadedContractNum environment variable is missing');\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB encryption with PKCS7 padding\nfunction AESEncrypt(plaintext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const blockSize = 16;\n    \n    // PKCS7 padding\n    const padding = blockSize - (plaintext.length % blockSize);\n    const paddedText = plaintext + String.fromCharCode(padding).repeat(padding);\n    \n    // AES-256-ECB encryption\n    const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n    cipher.setAutoPadding(false); // We handle padding manually\n    let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    return {\n        ciphertext: encrypted,\n        toString: () => encrypted\n    };\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    encrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        return AESEncrypt(data, parsedKey);\n    },\n\n    getMac: (encryptedData) => {\n        return SHA256(encryptedData.ciphertext + secret);\n    },\n\n    preExecute: (dataBody) => {\n        const encryptedData = util.encrypt(JSON.stringify(dataBody));\n        const mac = util.getMac(encryptedData);\n        bru.setEnvVar(\"data\", encryptedData.ciphertext);\n        bru.setEnvVar(\"mac\", mac);\n    }\n};\n\n// Create dataBody exactly as in your Postman script\nvar dataBody = {\n    \"imgn\"transparency\":\"1\",\n    \"signer\" : {\n        \"email\" :\"honloontestnewdev@yopmail.com\"    }\n};\n\n// Execute the preExecute function\nutil.preExecute(dataBody);\n\nconsole.log(\"✅ Pre-request script completed successfully\");",
          "res": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variable using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\n\n// Validate required variable\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\n\n// Hex to ASCII conversion function (handles the decrypted hex output)\nfunction hexToAscii(hexString) {\n    var hex = hexString.toString();\n    var str = '';\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n    }\n    return str;\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB decryption with PKCS7 unpadding\nfunction AESDecrypt(ciphertext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const encryptedBuffer = Buffer.from(ciphertext, 'hex');\n    \n    // AES-256-ECB decryption\n    const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n    decipher.setAutoPadding(false); // We handle padding manually\n    \n    let decrypted = decipher.update(encryptedBuffer);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    \n    // Remove PKCS7 padding\n    const padding = decrypted[decrypted.length - 1];\n    if (padding > 0 && padding <= 16) {\n        decrypted = decrypted.slice(0, -padding);\n    }\n    \n    return decrypted;\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    decrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        \n        // Decrypt the hex data\n        const decryptedBuffer = AESDecrypt(data, parsedKey);\n        \n        // Convert to hex string (equivalent to CryptoJS decryptedData.toString())\n        const decryptedHex = decryptedBuffer.toString('hex');\n        \n        // Convert hex to ASCII string\n        const decryptedText = hexToAscii(decryptedHex);\n        console.log(\"decryptedText\", decryptedText);\n        \n        return JSON.parse(decryptedText);\n    }\n};\n\n// Safely get response data (Bruno's res.body may be string or object)\nlet jsonData;\nif (typeof res.body === 'string') {\n    jsonData = JSON.parse(res.body);\n} else if (typeof res.body === 'object' && res.body !== null) {\n    jsonData = res.body;\n} else {\n    throw new Error('Unexpected response body format');\n}\n\n// Extract encrypted data\nvar data = jsonData.data;\nif (!data) {\n    throw new Error('Response does not contain \"data\" field');\n}\n\n// Decrypt the data\nvar decryptJson = util.decrypt(data);\nconsole.log(\"decryptJson\", JSON.stringify(decryptJson));"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "Upload Signature Image",
      "filename": "Upload Signature Image.bru",
      "seq": 13,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://{{host}}{{port}}{{path}}user/signimg",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "formUrlEncoded",
          "formUrlEncoded": [
            {
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            }
          ],
          "multipartForm": [],
          "file": []
        },
        "script": {
          "req": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variables using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\nconst uploadedContractNum = bru.getEnvVar(\"uploadedContractNum\");\n\n// Validate required variables\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\nif (!uploadedContractNum) {\n    throw new Error('uploadedContractNum environment variable is missing');\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB encryption with PKCS7 padding\nfunction AESEncrypt(plaintext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const blockSize = 16;\n    \n    // PKCS7 padding\n    const padding = blockSize - (plaintext.length % blockSize);\n    const paddedText = plaintext + String.fromCharCode(padding).repeat(padding);\n    \n    // AES-256-ECB encryption\n    const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n    cipher.setAutoPadding(false); // We handle padding manually\n    let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    return {\n        ciphertext: encrypted,\n        toString: () => encrypted\n    };\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    encrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        return AESEncrypt(data, parsedKey);\n    },\n\n    getMac: (encryptedData) => {\n        return SHA256(encryptedData.ciphertext + secret);\n    },\n\n    preExecute: (dataBody) => {\n        const encryptedData = util.encrypt(JSON.stringify(dataBody));\n        const mac = util.getMac(encryptedData);\n        bru.setEnvVar(\"data\", encryptedData.ciphertext);\n        bru.setEnvVar(\"mac\", mac);\n    }\n};\n\n// Create dataBody exactly as in your Postman script\nvar dataBody = {\n    \"imgn\"transparency\":\"1\",\n    \"signer\" : {\n        \"email\" :\"honloontestnewdev@yopmail.com\"    }\n};\n\n// Execute the preExecute function\nutil.preExecute(dataBody);\n\nconsole.log(\"✅ Pre-request script completed successfully\");",
          "res": "// Bruno doesn't have crypto-js built-in, so we use Node.js crypto module\nconst crypto = require('crypto');\n\n// Get environment variable using Bruno's API\nconst secret = bru.getEnvVar(\"apiSecret\");\n\n// Validate required variable\nif (!secret) {\n    throw new Error('apiSecret environment variable is missing');\n}\n\n// Hex to ASCII conversion function (handles the decrypted hex output)\nfunction hexToAscii(hexString) {\n    var hex = hexString.toString();\n    var str = '';\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n    }\n    return str;\n}\n\n// SHA256 function (equivalent to CryptoJS.SHA256)\nfunction SHA256(input) {\n    return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n}\n\n// AES ECB decryption with PKCS7 unpadding\nfunction AESDecrypt(ciphertext, keyHex) {\n    const keyBuffer = Buffer.from(keyHex, 'hex');\n    const encryptedBuffer = Buffer.from(ciphertext, 'hex');\n    \n    // AES-256-ECB decryption\n    const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n    decipher.setAutoPadding(false); // We handle padding manually\n    \n    let decrypted = decipher.update(encryptedBuffer);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    \n    // Remove PKCS7 padding\n    const padding = decrypted[decrypted.length - 1];\n    if (padding > 0 && padding <= 16) {\n        decrypted = decrypted.slice(0, -padding);\n    }\n    \n    return decrypted;\n}\n\n// Define utility functions (equivalent to your Postman util)\nconst util = {\n    decrypt: (data) => {\n        const parsedKey = SHA256(secret);\n        \n        // Decrypt the hex data\n        const decryptedBuffer = AESDecrypt(data, parsedKey);\n        \n        // Convert to hex string (equivalent to CryptoJS decryptedData.toString())\n        const decryptedHex = decryptedBuffer.toString('hex');\n        \n        // Convert hex to ASCII string\n        const decryptedText = hexToAscii(decryptedHex);\n        console.log(\"decryptedText\", decryptedText);\n        \n        return JSON.parse(decryptedText);\n    }\n};\n\n// Safely get response data (Bruno's res.body may be string or object)\nlet jsonData;\nif (typeof res.body === 'string') {\n    jsonData = JSON.parse(res.body);\n} else if (typeof res.body === 'object' && res.body !== null) {\n    jsonData = res.body;\n} else {\n    throw new Error('Unexpected response body format');\n}\n\n// Extract encrypted data\nvar data = jsonData.data;\nif (!data) {\n    throw new Error('Response does not contain \"data\" field');\n}\n\n// Decrypt the data\nvar decryptJson = util.decrypt(data);\nconsole.log(\"decryptJson\", JSON.stringify(decryptJson));"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "X-Verify Document",
      "filename": "Verify Document.bru",
      "seq": 20,
      "settings": {},
      "tags": [],
      "request": {
        "url": "https://stg-env.signingcloud.com/signserver/v1/contract/signature/verify",
        "method": "POST",
        "headers": [],
        "params": [
          {
            "name": "accesstoken",
            "value": "",
            "type": "query",
            "enabled": false
          }
        ],
        "body": {
          "mode": "multipartForm",
          "formUrlEncoded": [],
          "multipartForm": [
            {
              "type": "text",
              "name": "accesstoken",
              "value": "{{accessToken}}",
              "enabled": true
            },
            {
              "type": "text",
              "name": "data",
              "value": "{{data}}",
              "enabled": true
            },
            {
              "type": "text",
              "name": "mac",
              "value": "{{mac}}",
              "enabled": true
            },
            {
              "type": "file",
              "name": "verifyFile",
              "value": [
                "/C:/Users/hanwen.ho/Downloads/qwertyuiopoiuytrewqwertyuioppoiuytrewqwertyuioplkjhgfdsazxcvbnmnbvcxzas5tduiwefhuwhf9w8hwefowi8fw9fwhofhhrwhog (1).pdf"
              ],
              "enabled": true
            }
          ],
          "file": []
        },
        "script": {
          "req": "const util = eval(environment.ft)().util;\n\nvar dataBody = {        \n\t\"verifyFileHash\":\"7ce641262ec0d8642a6b6e6ff9edcefb2389dbb2ad62376279acc7409a40cdc3\"\n};\n\nutil.preExecute(dataBody);"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "folder",
      "name": "libs",
      "filename": "libs",
      "items": [
        {
          "type": "js",
          "name": "crypto-js",
          "filename": "crypto-js.js",
          "seq": 1,
          "fileContent": "// crypto-js.js - CryptoJS v3.1.9-1\n// You can get the full library from: https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js\n// But here's a minimal version for AES and SHA256:\n\n// Since we can't include the full library easily, let's use Bruno's built-in crypto\n// Bruno has access to Node.js crypto module!\n\nconst CryptoJS = {\n    SHA256: function(input) {\n        const crypto = require('crypto');\n        return crypto.createHash('sha256').update(input, 'utf8').digest('hex');\n    },\n    mode: {\n        ECB: 'ECB'\n    },\n    pad: {\n        Pkcs7: 'Pkcs7'\n    },\n    AES: {\n        encrypt: function(plaintext, key, options) {\n            const crypto = require('crypto');\n            const keyBuffer = Buffer.from(key, 'hex');\n            \n            // PKCS7 padding\n            const blockSize = 16;\n            const padding = blockSize - (plaintext.length % blockSize);\n            let paddedText = plaintext + String.fromCharCode(padding).repeat(padding);\n            \n            const cipher = crypto.createCipheriv('aes-256-ecb', keyBuffer, null);\n            cipher.setAutoPadding(false); // We handle padding manually\n            let encrypted = cipher.update(paddedText, 'utf8', 'hex');\n            encrypted += cipher.final('hex');\n            \n            return {\n                ciphertext: { toString: () => encrypted },\n                toString: () => encrypted\n            };\n        },\n        decrypt: function(ciphertext, key, options) {\n            const crypto = require('crypto');\n            const keyBuffer = Buffer.from(key, 'hex');\n            \n            const encryptedBuffer = Buffer.from(ciphertext, 'base64');\n            const decipher = crypto.createDecipheriv('aes-256-ecb', keyBuffer, null);\n            decipher.setAutoPadding(false); // We handle padding manually\n            \n            let decrypted = decipher.update(encryptedBuffer);\n            decrypted = Buffer.concat([decrypted, decipher.final()]);\n            \n            // Remove PKCS7 padding\n            const padding = decrypted[decrypted.length - 1];\n            if (padding > 0 && padding <= 16) {\n                decrypted = decrypted.slice(0, -padding);\n            }\n            \n            return {\n                toString: function(encoding = 'utf8') {\n                    if (encoding === 'hex') {\n                        return decrypted.toString('hex');\n                    }\n                    return decrypted.toString('utf8');\n                }\n            };\n        }\n    },\n    enc: {\n        Hex: {\n            parse: function(hexString) {\n                return Buffer.from(hexString, 'hex');\n            }\n        },\n        Base64: {\n            stringify: function(buffer) {\n                if (buffer instanceof Buffer) {\n                    return buffer.toString('base64');\n                }\n                return Buffer.from(buffer.toString(), 'hex').toString('base64');\n            }\n        }\n    }\n};"
        }
      ]
    },
    {
      "type": "http",
      "name": "Preupload Doc offline",
      "filename": "Preupload Doc offline.bru",
      "seq": 25,
      "settings": {
        "encodeUrl": true
      },
      "tags": [],
      "request": {
        "url": "http://172.19.14.253:8080/mock-echo/post",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "multipartForm",
          "formUrlEncoded": [],
          "multipartForm": [
            {
              "type": "file",
              "name": "file",
              "value": [
                "C:\\Users\\honloon.wong\\Documents\\SigningCloud\\DEMO_form\\demo and test.1.2.3.docx"
              ],
              "enabled": true
            }
          ],
          "file": []
        },
        "script": {
          "res": "// Handle file response and extract data\ntry {\n    // res.body should already be parsed JSON object\n    const jsonData = res.body.files;\n    \n    if (!jsonData || Object.keys(jsonData).length === 0) {\n        throw new Error('No files found in response');\n    }\n    \n    const firstFileKey = Object.keys(jsonData)[0];\n    const base64ByteString = jsonData[firstFileKey].split(/[,]+/).pop();\n    const fileType = firstFileKey.split(/[.]+/).pop();\n    \n    // Set environment variables\n    bru.setEnvVar(\"base64ByteString\", base64ByteString);\n    bru.setEnvVar(\"fileType\", fileType);\n    \n    console.log(\"✅ File data extracted successfully\");\n    console.log(\"File type:\", fileType);\n    console.log(\"Base64 preview:\", base64ByteString.substring(0, 30) + \"...\");\n    \n} catch (error) {\n    console.error(\"❌ Error processing file response:\", error.message);\n    throw error;\n}"
        },
        "vars": {},
        "assertions": [],
        "tests": "",
        "docs": "",
        "auth": {
          "mode": "none"
        }
      }
    }
  ],
  "activeEnvironmentUid": "o0BWHISyuAgnek5WY5jZW",
  "environments": [
    {
      "variables": [
        {
          "name": "host",
          "value": "demo.signingcloud.com",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "port",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "path",
          "value": "/signserver/v1/",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "uploadFilePath",
          "value": "C:\\Users\\honloon.wong\\Documents\\SigningCloud\\DEMO_form\\demo and test.1.2.3.docx",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "accessToken",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "base64ByteString",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "fileType",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "data",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "mac",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "uploadedContractNum",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "signAutoData",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "signAutoMac",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "downloadedpdfhex",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "ft",
          "value": "\"() => { var encrypt = (data) => { var secret = bru.getEnvVar(\\\"apiSecret\\\"); var parsedKey = CryptoJS.SHA256(secret); return CryptoJS.AES.encrypt(data, parsedKey, { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 }); }; var decrypt = (data) => { var secret = bru.getEnvVar(\\\"apiSecret\\\"); var parsedKey = CryptoJS.SHA256(secret); var ciphertext = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(data)); var decryptedData = CryptoJS.AES.decrypt(ciphertext, parsedKey, { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 }); var decryptedText = decryptedData.toString(CryptoJS.enc.Utf8); var decryptJson = JSON.parse(hex_to_ascii(decryptedText)); return decryptJson; }; var getMac = (encryptedData) => { var secret = bru.getEnvVar(\\\"apiSecret\\\"); return CryptoJS.SHA256(encryptedData.ciphertext + secret); }; var hex_to_ascii = (str1) => { var hex = str1.toString(); var str = ''; for (var n = 0; n < hex.length; n += 2) { str += String.fromCharCode(parseInt(hex.substr(n, 2), 16)); } return str; }; var preExecute = (dataBody, dataEnv = \\\"data\\\", macEnv = \\\"mac\\\") => { var encryptedData = encrypt(JSON.stringify(dataBody)); var mac = getMac(encryptedData); bru.setEnvVar(dataEnv, encryptedData.ciphertext.toString()); bru.setEnvVar(macEnv, mac.toString()); bru.setEnvVar(\\\"data\\\", encryptedData.ciphertext.toString()); bru.setEnvVar(\\\"mac\\\", mac.toString()); }; return { util: { encrypt, decrypt, getMac, hex_to_ascii, preExecute } }; }\"",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "apiKey",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        },
        {
          "name": "apiSecret",
          "value": "",
          "enabled": true,
          "secret": true,
          "type": "text"
        },
        {
          "name": "decryptedResponse",
          "value": "{\"docid\":89131,\"contractnum\":\"8D9D517F332C657F7FC7BF4EFDFB0A46\"}",
          "secret": false,
          "enabled": true,
          "type": "text"
        }
      ],
      "name": "SC"
    }
  ],
  "root": {
    "request": {
      "auth": {
        "mode": "none"
      },
      "vars": {
        "req": [
          {
            "name": "fileName",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "7Sj6I9rSK1CeV8BcalSAI"
          },
          {
            "name": "fileBytes",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "vUMdd6gxWkLc5bDGUnM5F"
          }
        ]
      }
    },
    "meta": {
      "name": "SigningCloud API"
    }
  },
  "brunoConfig": {
    "version": "1",
    "name": "SigningCloud API",
    "type": "collection",
    "ignore": [
      "node_modules",
      ".git"
    ],
    "size": 0.5082302093505859,
    "filesCount": 26
  }
}